(defwidget bar []
  (centerbox :orientation "h" :stack "fg" :class "bar" 
    (workspaces)
    (window_w)
    (sidestuff_systray)))

(defwidget sidestuff_systray [] 
  (centerbox :orientation "h" :halign "end"
		""
    (sidestuff)
    (systray_container)))

(defwidget systray_container []
 (box :class "sidestuff"
 (systray :orientation "h"
	:iconsize "15px"
	:spacing "5px"
 )))

(defwidget sidestuff []
  (box :orientation "h" :space-evenly false :class "sidestuff"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ï¡š"
            :value {round((1 - (EWW_RAM["/"].free_mem / EWW_RAM["/"].total_mem)) * 100, 0)}
            :onchange "")
    (metric :label "ðŸ’¾"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(deflisten workspaces :initial "[]" "bash scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash scripts/change-active-workspace {} ${current_workspace}" 
  (box :class "workspaces-widget" :orientation "h" :space-evenly false :halign "start"
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "${workspace.id == current_workspace ? "workspaces-item-current" : "workspaces-item-normal"}"
							 :width 25
							 :height 25
            (label :text "${workspace.id}")
            )
          )
        )
      )
    )
  )
(deflisten window :initial "..." "sh scripts/get-window-title")
(defwidget window_w []
  (box
		:class "${window != "" ? "window-title" : ""}"
    (label
			:text "${window}"
			:limit-width 10
    )
  )
	)

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "20px"
                      :anchor "top center")
	:stacking "fg"
  :reserve (struts :side "top" :distance "4%")
  :windowtype "dock"
	:exclusive true
	:wm-ignore false
  (bar))
